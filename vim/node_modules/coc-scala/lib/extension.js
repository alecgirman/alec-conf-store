"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const pkg_dir_1 = tslib_1.__importDefault(require("pkg-dir"));
const coc_nvim_1 = require("coc.nvim");
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const config = coc_nvim_1.workspace.getConfiguration().get('scala', {});
        if (config.enable === false) {
            return;
        }
        const serverOptions = {
            command: (config.binaryPath || (yield pkgBin('metals-vim'))),
            args: ['start'],
            transport: coc_nvim_1.TransportKind.stdio
        };
        const clientOptions = {
            documentSelector: ['scala', 'sbt']
        };
        const client = new coc_nvim_1.LanguageClient('scala', 'metals', serverOptions, clientOptions);
        context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client), coc_nvim_1.commands.registerCommand("scala.version", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const rootDir = yield pkg_dir_1.default(__dirname);
            const v = require(path_1.default.resolve(rootDir, 'package.json')).version;
            // TODO scala version
            // TODO mentals version
            coc_nvim_1.workspace.showMessage(`Version: ${v} [node: ${process.versions.node}]`, 'more');
        })));
    });
}
exports.activate = activate;
function pkgBin(name) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const rootDir = yield pkg_dir_1.default(__dirname);
        let bin = path_1.default.join(rootDir, 'bin', name);
        try {
            bin = fs_1.default.realpathSync(bin);
        }
        catch (e) {
            // ignore
        }
        return bin;
    });
}
//# sourceMappingURL=extension.js.map